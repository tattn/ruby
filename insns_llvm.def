$nop
$putself
$putobject
$putobject_OP_INT2FIX_O_0_C_
$putobject_OP_INT2FIX_O_1_C_

$putnil {
	val = RB_JIT->valueVal(Qnil);
}

$leave {
	/* BUILDER->CreateCall(RB_JIT->llvm_pop_frame, JIT_TH); */
	Value *ptr = BUILDER->CreateIntToPtr(RB_JIT->pop_frame, RB_JIT->ptrTy);
}

$getspecial {
// $leave {
//     // if (UNLIKELY(VM_FRAME_TYPE_FINISH_P(GET_CFP()))) {
// 	// vm_pop_frame(th);
//     //
// 	// return val;
//     // }
//     // else {
// 	// vm_pop_frame(th);
// 	// RESTORE_REGS();
//     // }
//
// 	BUILDER->CreateCall(RB_JIT->llvm_pop_frame, JIT_TH);
// 	RESTORE_REGS();
// }


    // val = vm_getspecial(th, GET_LEP(), key, type);
}

$opt_plus {
	Value *tmp = BUILDER->CreateAnd(obj, -2);
	val = BUILDER->CreateAdd(recv, tmp);
}

$opt_minus {
	Value *a, *b, *c;

	a = FIX2LONG(recv);
	b = FIX2LONG(obj);
	c = BUILDER->CreateSub(a, b);
	val = LONG2FIX(c);
}

$opt_mult {
	Value *a, *b;

	a = FIX2LONG(recv);
	b = FIX2LONG(obj);
	val = LONG2FIX(BUILDER->CreateMul(a, b));
}

$opt_div {
	Value *x, *y, *div;

	x = FIX2LONG(recv);
	y = FIX2LONG(obj);
	div = BUILDER->CreateSDiv(x, y);
	val = LONG2NUM(div);
}

$send {
	rb_ci->argc = rb_ci->orig_argc;
	Value *ci_orig_argc_elmptr = BUILDER->CreateStructGEP(ci, 2);
	Value *ci_orig_argc = BUILDER->CreateLoad(ci_orig_argc_elmptr);
	Value *ci_argc_elmptr = BUILDER->CreateStructGEP(ci, 12);
	BUILDER->CreateStore(ci_orig_argc, ci_argc_elmptr);

	BUILDER->CreateCall4(RB_JIT->llvm_caller_setup_arg_block, JIT_TH, JIT_CFP, ci, RB_JIT->int32Zero);

	Value *ci_recv_elmptr = BUILDER->CreateStructGEP(ci, 11);
	Value *ci_recv = TOPN(rb_ci->argc);
	BUILDER->CreateStore(ci_recv, ci_recv_elmptr);
	BUILDER->CreateCall2(RB_JIT->llvm_search_method, ci, ci_recv);

	Value *ci_call_elmptr = BUILDER->CreateStructGEP(ci, 14);
	Value *ci_call = BUILDER->CreateLoad(ci_call_elmptr);
	CALL_METHOD(ci);
}

$opt_send_without_block {
	rb_ci->argc = rb_ci->orig_argc;
	BUILDER->CreateCall2(RB_JIT->llvm_search_method, ci, TOPN(rb_ci->argc));
	Value *ci_call_elmptr = BUILDER->CreateStructGEP(ci, 14);
	Value *ci_call = BUILDER->CreateLoad(ci_call_elmptr);
	CALL_METHOD(ci);
}

$setlocal {
/*
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;
*/
}

$setlocal_OP__WC__0 {
	Value *ep = GET_EP();

	Value *idx_ep = BUILDER->CreateInBoundsGEP(ep, BUILDER->CreateSub(RB_JIT->valueZero, idx));
	BUILDER->CreateStore(val, idx_ep);
}

$getlocal {
/*
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);
*/
}

$getlocal_OP__WC__0 {
	Value *ep = GET_EP();

	Value *idx_ep = BUILDER->CreateInBoundsGEP(ep, BUILDER->CreateSub(RB_JIT->valueZero, idx));
	val = BUILDER->CreateLoad(idx_ep);
}

$branchunless {
	Value *test = RTEST(val);
	BasicBlock *bb_dst  = insns[insn->index + insn->len + dst]->bb;
	BasicBlock *bb_next = insns[insn->index + insn->len      ]->bb;
	BUILDER->CreateCondBr(test, bb_next, bb_dst);
}
