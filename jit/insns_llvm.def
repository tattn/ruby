$nop
$putself
$putobject
$putobject_OP_INT2FIX_O_0_C_
$putobject_OP_INT2FIX_O_1_C_

$putnil {
	val = RB_JIT->values->value(Qnil);
}

$leave {
	BUILDER->CreateCall(RB_JIT->funcs->vm_pop_frame, JIT_TH);
    PUSH(val);
	jit_codegen_make_return(codegen_func, 1);
}

$getspecial {
    // val = vm_getspecial(th, GET_LEP(), key, type);
	Value *ep = BUILDER->CreateCall(RB_JIT->funcs->VM_EP_LEP, GET_EP());
	val = BUILDER->CreateCall4(RB_JIT->funcs->vm_getspecial, JIT_TH, ep, key, type);
}

$putstring {
    // val = rb_str_resurrect(str);
	val = BUILDER->CreateCall(RB_JIT->funcs->rb_str_resurrect, str);
}

$opt_plus {
	Value *tmp = BUILDER->CreateAnd(obj, ~1);
	val = BUILDER->CreateAdd(recv, tmp);
}

$opt_minus {
	Value *a, *b, *c;

	a = FIX2LONG(recv);
	b = FIX2LONG(obj);
	c = BUILDER->CreateSub(a, b);
	val = LONG2FIX(c);
}

$opt_mult {
	Value *a, *b;

	a = FIX2LONG(recv);
	b = FIX2LONG(obj);
	val = LONG2FIX(BUILDER->CreateMul(a, b));
}

$opt_div {
	Value *x, *y, *div;

	x = FIX2LONG(recv);
	y = FIX2LONG(obj);
	div = BUILDER->CreateSDiv(x, y);
	val = LONG2NUM(div);
}

$opt_lt {
	Value *cmp = BUILDER->CreateICmpSLT(recv, obj);
	BasicBlock *bb_then = BasicBlock::Create(CONTEXT, "lt_then", codegen_func.jit_trace_func);
	BasicBlock *bb_else = BasicBlock::Create(CONTEXT, "lt_else", codegen_func.jit_trace_func);
	BasicBlock *bb_merge = BasicBlock::Create(CONTEXT, "lt_merge", codegen_func.jit_trace_func);
	val = BUILDER->CreateAlloca(RB_JIT->types->valueT);
	BUILDER->CreateCondBr(cmp, bb_then, bb_else);
	BUILDER->SetInsertPoint(bb_then);
	BUILDER->CreateStore(RB_JIT->values->trueV, val);
	BUILDER->CreateBr(bb_merge);
	BUILDER->SetInsertPoint(bb_else);
	BUILDER->CreateStore(RB_JIT->values->falseV, val);
	BUILDER->CreateBr(bb_merge);
	BUILDER->SetInsertPoint(bb_merge);
	val = BUILDER->CreateLoad(val);
}

$send {
	rb_ci->argc = rb_ci->orig_argc;
	Value *ci_orig_argc_elmptr = BUILDER->CreateStructGEP(ci, 2);
	Value *ci_orig_argc = BUILDER->CreateLoad(ci_orig_argc_elmptr);
	Value *ci_argc_elmptr = BUILDER->CreateStructGEP(ci, 12);
	BUILDER->CreateStore(ci_orig_argc, ci_argc_elmptr);

	BUILDER->CreateCall4(RB_JIT->llvm_caller_setup_arg_block, JIT_TH, JIT_CFP, ci, RB_JIT->values->int32Zero);

	Value *ci_recv_elmptr = BUILDER->CreateStructGEP(ci, 11);
	Value *ci_recv = TOPN(rb_ci->argc);
	BUILDER->CreateStore(ci_recv, ci_recv_elmptr);
	BUILDER->CreateCall2(RB_JIT->funcs->vm_search_method, ci, ci_recv);

	Value *ci_call_elmptr = BUILDER->CreateStructGEP(ci, 14);
	Value *ci_call = BUILDER->CreateLoad(ci_call_elmptr);
	CALL_METHOD(ci);
}

$opt_send_without_block {
	rb_ci->argc = rb_ci->orig_argc;
	BUILDER->CreateCall2(RB_JIT->funcs->vm_search_method, ci, TOPN(rb_ci->argc));
	Value *ci_call_elmptr = BUILDER->CreateStructGEP(ci, 14);
	Value *ci_call = BUILDER->CreateLoad(ci_call_elmptr);
	CALL_METHOD(ci);
}

$setlocal {
/*
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    *(ep - idx) = val;
*/
}

$setlocal_OP__WC__0 {
	Value *ep = GET_EP();

	Value *idx_ep = BUILDER->CreateInBoundsGEP(ep, BUILDER->CreateSub(RB_JIT->values->valueZero, idx));
	BUILDER->CreateStore(val, idx_ep);
}

$getlocal {
/*
    int i, lev = (int)level;
    VALUE *ep = GET_EP();

    for (i = 0; i < lev; i++) {
	ep = GET_PREV_EP(ep);
    }
    val = *(ep - idx);
*/
}

$getlocal_OP__WC__0 {
	Value *ep = GET_EP();

	Value *idx_ep = BUILDER->CreateInBoundsGEP(ep, BUILDER->CreateSub(RB_JIT->values->valueZero, idx));
	val = BUILDER->CreateLoad(idx_ep);
}

$jump { // JUMP(dst);
	jit_insn_t *next_insn = insns[insn->index + 1];
	jit_insn_t *dest_insn = jit_codegen_jump_insn(trace, next_insn, dst);
	BasicBlock *bb_dst;
	if (dest_insn) {
		bb_dst = dest_insn->bb;
	}
	else {
		JIT_DEBUG_LOG("dest_insn_else");
		bb_dst = BasicBlock::Create(CONTEXT, "jump", codegen_func.jit_trace_func);
		BUILDER->SetInsertPoint(bb_dst);
		Value* cfp_pc = BUILDER->CreateStructGEP(JIT_CFP, 0);
		Value* tmp = BUILDER->CreateInBoundsGEP(cfp_pc, RB_JIT->values->value(dst));
		tmp = BUILDER->CreateLoad(tmp);
		//Value* tmp2 = BUILDER->CreateAdd(tmp, RB_JIT->values->value(dst));
		PRINT_VAL(tmp);
		BUILDER->CreateStore(tmp, cfp_pc);
		jit_codegen_make_return(codegen_func);
		BUILDER->SetInsertPoint(insn->bb);
	}
	BUILDER->CreateBr(bb_dst);
}

$branchunless {
	Value *test = RTEST(val);
	JIT_DEBUG_LOG2("branchless: %d, %d, %d", insn->index, insn->len, dst);
	jit_insn_t *next_insn = insns[insn->index + 1];
	jit_insn_t *dest_insn = jit_codegen_jump_insn(trace, next_insn, dst);
	//BasicBlock *bb_dst  = insns[insn->index + insn->len + dst]->bb;
	BasicBlock *bb_dst;
	if (dest_insn) {
		bb_dst = dest_insn->bb;
	}
	else {
		JIT_DEBUG_LOG("dest_insn_else");
		bb_dst = BasicBlock::Create(CONTEXT, "branchunless", codegen_func.jit_trace_func);
		BUILDER->SetInsertPoint(bb_dst);
		Value* cfp_pc = BUILDER->CreateStructGEP(JIT_CFP, 0);
		Value* tmp = BUILDER->CreateInBoundsGEP(cfp_pc, RB_JIT->values->value(dst));
		tmp = BUILDER->CreateLoad(tmp);
		//Value* tmp2 = BUILDER->CreateAdd(tmp, RB_JIT->values->value(dst));
		PRINT_VAL(tmp);
		BUILDER->CreateStore(tmp, cfp_pc);
		jit_codegen_make_return(codegen_func);
		BUILDER->SetInsertPoint(insn->bb);
	}

	BasicBlock *bb_next = next_insn->bb;
	BUILDER->CreateCondBr(test, bb_next, bb_dst);
}

$branchif {
	Value *test = RTEST(val);
	JIT_DEBUG_LOG2("branchif: %d, %d, %d", insn->index, insn->len, dst);
	// ジャンプ先や次の命令がトレース外の時の処理を統一化する
	jit_insn_t *next_insn = insns[insn->index + 1];
	//jit_insn_t *next_insn = jit_codegen_jump_insn(trace, insn, 1);
	jit_insn_t *dest_insn = jit_codegen_jump_insn(trace, next_insn, dst);
	//BasicBlock *bb_dst  = insns[insn->index + insn->len + dst]->bb;
	BasicBlock *bb_dst;
	if (dest_insn) {
		bb_dst = dest_insn->bb;
	}
	else {
		JIT_DEBUG_LOG("dest_insn_else");
		bb_dst = BasicBlock::Create(CONTEXT, "branchif", codegen_func.jit_trace_func);
		BUILDER->SetInsertPoint(bb_dst);
		Value* cfp_pc = BUILDER->CreateStructGEP(JIT_CFP, 0);
		Value* tmp = BUILDER->CreateInBoundsGEP(cfp_pc, RB_JIT->values->value(dst));
		tmp = BUILDER->CreateLoad(tmp);
		//Value* tmp2 = BUILDER->CreateAdd(tmp, RB_JIT->values->value(dst));
		PRINT_VAL(tmp);
		BUILDER->CreateStore(tmp, cfp_pc);
		jit_codegen_make_return(codegen_func);
		BUILDER->SetInsertPoint(insn->bb);
	}

	BasicBlock *bb_next = next_insn->bb;
	BUILDER->CreateCondBr(test, bb_dst, bb_next);
}
